class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int,int> mp;
        int n=inorder.size();
        for(int i=0;i<n;i++){
            mp[inorder[i]]=i;
        }
        return constructTree(inorder,0,n-1,postorder,0,n-1,mp);
    }
    TreeNode* constructTree(vector<int>&inorder,int inStart,int inEnd,vector<int>&postorder,int postStart,int postEnd,map<int,int>&mp){
        if(inStart>inEnd || postStart>postEnd)return NULL;
        TreeNode* root=new TreeNode(postorder[postEnd]);
        int ele=mp[root->val];
        int nEle=ele-inStart;
        
        root->left=constructTree(inorder,inStart,ele-1,postorder,postStart,postStart+nEle-1,mp);
        root->right=constructTree(inorder,ele+1,inEnd,postorder,postStart+nEle,postEnd-1,mp);
        return root;
    }
};
