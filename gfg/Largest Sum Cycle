class Solution
{
  public:
  
  long long largestSum=-1;
  
  void dfs(int node,vector<int>&Edge,vector<int>&vis,vector<int>&dfsVis){
      vis[node]=1;
      dfsVis[node]=1;
      
      if(Edge[node]!=-1){
          int adj=Edge[node];
          if(!vis[adj])dfs(adj,Edge,vis,dfsVis);
          else if(dfsVis[adj]){
              int curr=adj;
              long long sum=0;
              do{
                  sum+=curr;
                  curr=Edge[curr];
              }while(curr!=adj);
              
              largestSum=max(sum,largestSum);
          }
      }
      dfsVis[node]=0;
  }
  
  long long largestSumCycle(int N, vector<int> Edge)
  {
    // code here
    vector<int> vis(N,0);
    vector<int> dfsVis(N,0);
    for(int i=0;i<N;i++){
        if(!vis[i])dfs(i,Edge,vis,dfsVis);
    }
    return largestSum;
  }
};
