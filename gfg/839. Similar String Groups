class DisjointSet{

    private:

    vector<int> size;
    vector<int> parent;

    public:

    DisjointSet(int n){
        size.resize(n+1);
        parent.resize(n+1);
        for(int i=0;i<=n;i++){
            size[i]=1;
            parent[i]=i;
        }
    }

    int findParent(int node){
        if(node==parent[node]) return node;
        return parent[node]=findParent(parent[node]);
    }

    void unionBySize(int u, int v){
        u=findParent(u);
        v=findParent(v);
        if(u==v) return;
        else if(size[u]<size[v]){
            parent[u]=parent[v];
            size[u]+=size[v];
        } 
        else{
            parent[u]=parent[v];
            size[u]+=size[v];
        }
    }
};

class Solution {

public:

bool areSimilar(string &x, string &y){
    int diff=0;
    for(int i=0;i<x.length();i++){
        if(x[i]!=y[i]) diff++;
    }
    return (diff==0 or diff==2);
}

int numSimilarGroups(vector<string>& strs){
    int n=strs.size();
    DisjointSet S(n);
    int ans=n;
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            if(areSimilar(strs[i],strs[j]) and (S.findParent(i)!=S.findParent(j))){
                S.unionBySize(i,j);
                ans--;
            }
        }
    }
    return ans;
}
};
