class Solution{
public:	
	// calculate the maximum sum with out adjacent
	int solve(int ind,int *arr,int n,int dp[]){
	    if(ind>=n)return 0;
	    
	    if(dp[ind]!=-1)return dp[ind];
	    int pick=arr[ind]+solve(ind+2,arr,n,dp);
	    int notpick=solve(ind+1,arr,n,dp);
	    return dp[ind]=max(pick,notpick);
	}
	
	int findMaxSum(int *arr, int n) {
	    // code here
	    int dp[n+1];
	    memset(dp,-1,sizeof(dp));
	    return solve(0,arr,n,dp);
	}
};


///
class Solution{
public:	
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    // code here
	    int dp[n]={0};
	    dp[0]=arr[0];
	    dp[1]=max(arr[0],arr[1]);
	    for(int i=2;i<n;i++){
	        dp[i]=max(dp[i-1],dp[i-2]+arr[i]);
	    }
	    return dp[n-1];
	}
};
